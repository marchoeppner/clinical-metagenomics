params {

	pathoscope_db = false
	params.outdir = "results"

	metaphlan_db = false	

	kaiju_db = false

	kneaddata_db = false

	trimmomatic_dir = "/opt/trimmomatic/0.36/"

	max_time = "72.h"
	max_cpus = 16
	max_memory = "120.GB"

}


profiles {
	standard {
		includeConfig 'conf/base.config'
		includeConfig 'conf/rzcluster.config'
	}
	devel {
		includeConfig 'conf/base.config'
		includeConfig 'conf/rzcluster_new.config'
	}
}


// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}

