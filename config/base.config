// Job paramaters to set for this environment

params.outdir = "output" 

// Process setting

process {

  // Global cluster parameters

  cpus = { check_max( 1 * task.attempt, 'cpus' ) }
  memory = { check_max( 8.GB * task.attempt, 'memory' ) }
  time = { check_max( 2.h * task.attempt, 'time' ) }

  errorStrategy = { task.exitStatus == 143 ? 'retry' : 'finish' }
  maxRetries = 3
  maxErrors = '-1'
 
  // Specific cluster parameters for each process

  $Merge {
	time = { 3.h * task.attempt }
  }

  $runMultiQCFastq {
	conda = "multiqc=1.5"
  }

  $runBwa {
	conda = "bwa=0.7.15 samtools=1.5"
	cpus = { check_max( 16 * task.attempt, 'cpus' ) }
  	memory = { check_max( 32.GB * task.attempt, 'memory' ) }
  	time = { check_max( 4.h * task.attempt, 'time' ) }
  }

  $runTrimgalore {
	conda = "conda-forge::openjdk=8.0.144 trim-galore=0.4.4" 
  	cpus = { check_max( 4 * task.attempt, 'cpus' ) }
  }

  $extractUnmapped {
	conda = "samtools=1.5"
  }
  
  $runAriba {
	conda = "ariba"
  }

  $runPathoscopeMap {
	conda =  "pathoscope=2.0.6" 
  	cpus = { check_max( 8 * task.attempt, 'cpus' ) }
  	memory = { check_max( 32.GB * task.attempt, 'memory' ) }
  	time = { check_max( 3.h * task.attempt, 'time' ) }
  }

  $runPathoscopeId {
	conda =  "pathoscope=2.0.6"
        time = { check_max( 3.h * task.attempt, 'time' ) }
  }

  $runMetaphlan {
	conda =  "metaphlan2=2.7.7" 
        cpus = { check_max( 8 * task.attempt, 'cpus' ) }
        memory = { check_max( 32.GB * task.attempt, 'memory' ) }
        time = { check_max( 3.h * task.attempt, 'time' ) }
  }

  $runKaiju {
	conda = "kaiju=1.6.2"
        cpus = { check_max( 16 * task.attempt, 'cpus' ) }
        memory = { check_max( 32.GB * task.attempt, 'memory' ) }
        time = { check_max( 1.h * task.attempt, 'time' ) }
  }

   $runKaijuReport {
	conda =  'kaiju=1.6.2'
  }

  $makeReport {
	module = [ "Ruby/2.2.2" ]
  }

}

params {
  // Defaults only, expecting to be overwritten
  max_memory = 128.GB
  max_cpus = 16
  max_time = 240.h
  maxMultiqcEmailFileSize = 25.MB
}

